<?xml version="1.0"?>

<project name="rules" default="compilerules">
    <target name="compilerules">
    	<copy overwrite ="true" todir="${dirdest}">
		<fileset dir="${dirorig}" includes="${rulesclass}.in"/>
		<mapper type="glob" from="*.in" to="*.java"/>
        </copy>

    	<replaceregexp flags="g" match="\["
    	    replace="(">
    	    	<fileset dir="${dirdest}" includes="${rulesclass}.java"/></replaceregexp>
    	<replaceregexp flags="g" match="\]"
    	    replace=")?">
    	    	<fileset dir="${dirdest}" includes="${rulesclass}.java"/></replaceregexp>
    	


<!--    	<replaceregexp flags="g" match="&#x22;(.*?)&#x22;"-->
       	<replaceregexp flags="g" match="&#x22;(.*?)&#x22;" 
    	    replace="\1">
    	    	<fileset dir="${dirdest}" includes="${rulesclass}.java"/></replaceregexp>
  
    	
    	<replaceregexp flags="g"
        	    	  match="&#x3c;NR_(.*?)_(.*?)&#x3e;:==(.*)&#xD;&#xA;"
        	    	  replace="
			if (key == \1){&#xD;&#xA;
    		int dayNumber = 1;&#xD;&#xA;
    		int monthNumber = 1;&#xD;&#xA;
    		int yearNumber = DateCommons.getYearFromAnchorDate();&#xD;&#xA;
				String[] parts = foundDate.split(&#x22;&#x5c;&#x5c;&#x5c;&#x5c;&#x5c;&#x5c;&#x5c;&#x5c;\2&#x22;);&#xD;&#xA;
\3
    		
    		}&#xD;&#xA;">
        	    	<fileset dir="${dirdest}" includes="${rulesclass}.java"/></replaceregexp>
    		

    	<replaceregexp flags="g"
    	        	        	    	  match="&#x3c;NDay_(.*?)&#x3e;"
    	        	        	    	  replace="
    		dayNumber = Integer.parseInt(parts[\1].replaceAll(&#x22;\\\\\\\\p{P}&#x22;, &#x22;&#x22;));;&#xD;&#xA;">
    	        	        	    	<fileset dir="${dirdest}" includes="${rulesclass}.java"/></replaceregexp> 	
    	
    	<!-- Marks eary/mid/late for years -->
    	<replaceregexp flags="g"
    	    	        	        	    	  match="&#x3c;VarY1&#x3e;"
    	    	        	        	    	  replace="
    		  if (parts[0].toLowerCase().matches(&#x22;early&#x22;)){&#xD;&#xA;
    					monthNumber = 1;&#xD;&#xA;
    				}&#xD;&#xA;
    				else if (parts[0].toLowerCase().matches(&#x22;mid&#x22;)){&#xD;&#xA;
    					monthNumber = 6;&#xD;&#xA;
    				}&#xD;&#xA;
    				else if (parts[0].toLowerCase().matches(&#x22;late&#x22;)){&#xD;&#xA;
    					monthNumber = 10;&#xD;&#xA;
    				}&#xD;&#xA;">

    	    	        	        	    	<fileset dir="${dirdest}" includes="${rulesclass}.java"/></replaceregexp>
    	<!-- Marks beginning/middle/end of for years -->
    	<replaceregexp flags="g"
    	    	        	        	    	  match="&#x3c;VarY2&#x3e;"
    	    	        	        	    	  replace="
    		if (parts[0].matches(&#x22;(?i)(start|beginning)&#x22;)){&#xD;&#xA;
    								monthNumber = 1;&#xD;&#xA;
    							}&#xD;&#xA;
    							else if (parts[0].matches(&#x22;(?i)middle&#x22;)){&#xD;&#xA;
    								monthNumber = 5;&#xD;&#xA;
    							}&#xD;&#xA;
    							else if (parts[0].matches(&#x22;(?i)end&#x22;)){&#xD;&#xA;
    								monthNumber = 10;&#xD;&#xA;
    							}">

    	    	        	        	    	<fileset dir="${dirdest}" includes="${rulesclass}.java"/></replaceregexp>
    	<!-- Marks beginning/middle/end of for months -->
    	<replaceregexp flags="g"
        	    	        	        	    	  match="&#x3c;VarM1&#x3e;"
        	    	        	        	    	  replace="
        		  if (parts[0].toLowerCase().matches(&#x22;early&#x22;)){&#xD;&#xA;
        					dayNumber = 1;&#xD;&#xA;
        				}&#xD;&#xA;
        				else if (parts[0].toLowerCase().matches(&#x22;mid&#x22;)){&#xD;&#xA;
        					dayNumber = 10;&#xD;&#xA;
        				}&#xD;&#xA;
        				else if (parts[0].toLowerCase().matches(&#x22;late&#x22;)){&#xD;&#xA;
        					dayNumber = 20;&#xD;&#xA;
        				}&#xD;&#xA;">

        	    	        	        	    	<fileset dir="${dirdest}" includes="${rulesclass}.java"/></replaceregexp>
    	<!-- Marks eary/mid/late for months -->
        	<replaceregexp flags="g"
            	    	        	        	    	  match="&#x3c;VarM2&#x3e;"
            	    	        	        	    	  replace="
        		if (parts[0].matches(&#x22;(?i)(start|beginning)&#x22;)){&#xD;&#xA;
        								dayNumber = 1;&#xD;&#xA;
        							}&#xD;&#xA;
        							else if (parts[0].matches(&#x22;(?i)middle&#x22;)){&#xD;&#xA;
        								dayNumber = 10;&#xD;&#xA;
        							}&#xD;&#xA;
        							else if (parts[0].matches(&#x22;(?i)end&#x22;)){&#xD;&#xA;
        								dayNumber = DateCommons.getLastDayOfMonth(monthNumber, yearNumber) - 10;&#xD;&#xA;
        							}&#xD;&#xA;">

            	    	        	        	    	<fileset dir="${dirdest}" includes="${rulesclass}.java"/></replaceregexp>
    	
    	<replaceregexp flags="g"
    	    	        	        	    	  match="&#x3c;NDayST_(.*?)&#x3e;"
    	    	        	        	    	  replace="
    		if (parts[\1].matches(&#x22;\\\\\\\\d{1,2}(st|nd|rd|th)?(,)?&#x22;)){&#xD;&#xA;
    									dayNumber = Integer.parseInt(parts[\1].replaceAll(&#x22;(st|nd|rd|th)&#x22;, &#x22;&#x22;).replaceAll(&#x22;,&#x22;,&#x22;&#x22;));&#xD;&#xA;	
    								};&#xD;&#xA;">
    	    	        	        	    	<fileset dir="${dirdest}" includes="${rulesclass}.java"/></replaceregexp> 	
    	
    	<replaceregexp flags="g"
    	        	        	    	  match="&#x3c;NMonthL_(.*?)&#x3e;"
    	        	        	    	  replace="
    		monthNumber = englishMonthName2Number.get(parts[\1].toLowerCase().replaceAll(&#x22;\\\\\\\\p{P}&#x22;, &#x22;&#x22;));&#xD;&#xA;">
    	        	        	    	<fileset dir="${dirdest}" includes="${rulesclass}.java"/></replaceregexp> 
    	<replaceregexp flags="g"
    	    	        	        	    	  match="&#x3c;NMonth_(.*?)&#x3e;"
    	    	        	        	    	  replace="
    		monthNumber = Integer.parseInt(parts[\1]);&#xD;&#xA;">
    	    	        	        	    	<fileset dir="${dirdest}" includes="${rulesclass}.java"/></replaceregexp> 	
		

    	<replaceregexp flags="g"
    	        	        	    	  match="&#x3c;NYear_(.*?)&#x3e;"
    	        	        	    	  replace="
    		yearNumber = DateCommons.getYearFromAnchorDate();&#xD;&#xA;
			if (parts.length > \1){&#xD;&#xA;
				yearNumber = Integer.parseInt(parts[\1].replaceAll(&#x22;\\\\\\\\D&#x22;, &#x22;&#x22;));&#xD;&#xA;
			}&#xD;&#xA;
			else{&#xD;&#xA;
				yearNumber = DateCommons.getYearFromAnchorDate();&#xD;&#xA;
			}&#xD;&#xA;
			">
    	        	        	    	<fileset dir="${dirdest}" includes="${rulesclass}.java"/></replaceregexp> 	
    	<replaceregexp flags="g"
    	    	        	        	    	  match="&#x3c;NDur_(.*?)&#x3e;"
    	    	        	        	    	  replace="
    	    		cal.set(yearNumber, monthNumber-1, dayNumber, 0, 0, 0);&#xD;&#xA;
    	    		normalizedStartDate = cal.getTime();&#xD;&#xA;
    	    		normalizedEndDate = DateCommons.increaseCalendar(Calendar.DATE, \1, normalizedStartDate);&#xD;&#xA;
    	    		dates.add(DateCommons.fullDateFormat.format(normalizedStartDate));&#xD;&#xA;
    	    		dates.add(DateCommons.fullDateFormat.format(normalizedEndDate));&#xD;&#xA;
    	    		DateCommons.updateAnchorDate(normalizedStartDate);&#xD;&#xA;
    				">
    	    	        	        	    	<fileset dir="${dirdest}" includes="${rulesclass}.java"/></replaceregexp> 
    	
    	<!-- This is used to set the seasons-->
    	<replaceregexp flags="g"
    	
        												
    	 match="&#x3c;NSeason_(.*?)&#x3e;"
    	 replace="
 
    		 String season = parts[0];&#xD;&#xA;
    		       if (season.equalsIgnoreCase(&#x22;spring&#x22;)){&#xD;&#xA;
    		             monthNumber = 3;&#xD;&#xA;
    		             dayNumber = 31;&#xD;&#xA;
    		            }&#xD;&#xA;
    		            else if (season.equalsIgnoreCase(&#x22;summer&#x22;)){&#xD;&#xA;
    		            monthNumber = 6;&#xD;&#xA;
    		            dayNumber = 31;&#xD;&#xA;
    		&#xD;&#xA;
    		            }&#xD;&#xA;
    		            else if (season.equalsIgnoreCase(&#x22;(autumn|fall)&#x22;)){&#xD;&#xA;
    		            monthNumber = 9;&#xD;&#xA;
    		            dayNumber = 30;&#xD;&#xA;
    		&#xD;&#xA;
    		            }&#xD;&#xA;
    		            else if (season.equalsIgnoreCase(&#x22;winter&#x22;)){&#xD;&#xA;
    		            monthNumber = 12;&#xD;&#xA;
    		            dayNumber = 28;&#xD;&#xA;
    		&#xD;&#xA;
    		             if (((GregorianCalendar) cal).isLeapYear(yearNumber)){&#xD;&#xA;
    		            	dayNumber = 29;&#xD;&#xA;
    		             }&#xD;&#xA;
    		            }&#xD;&#xA;
    		            if (season.equalsIgnoreCase(&#x22;winter&#x22;)){&#xD;&#xA;
    		             cal.set(yearNumber-1, monthNumber-1, dayNumber,0,0,0);&#xD;&#xA;
    		            }&#xD;&#xA;
    		            else{&#xD;&#xA;
    		             cal.set(yearNumber, monthNumber-1, dayNumber,0,0,0);&#xD;&#xA;
    		            }&#xD;&#xA;
    	    				">
    	    	    	        	        	    	<fileset dir="${dirdest}" includes="${rulesclass}.java"/></replaceregexp>

    	
    	<replaceregexp flags="g"
        	    	  match="&#x3c;RUL_(.*)&#x3e;:==(.*)&#xD;&#xA;"
        	    	  replace="counter++;englishDateRegexMap.put(counter, String.format(&#x22;\\\\\\\\b\2\\\\\\\\b&#x22;));&#xD;&#xA;
    		patterns.add(Pattern.compile(englishDateRegexMap.get(counter)));&#xD;&#xA;">
        	    	<fileset dir="${dirdest}" includes="${rulesclass}.java"/></replaceregexp>

    	<replaceregexp flags="g"
        	    	  match="&#x3c;(.*)&#x3e;:=="
        	    	  replace="String \1:==">
        	    	<fileset dir="${dirdest}" includes="${rulesclass}.java"/></replaceregexp>

    	<replaceregexp flags="g"
        	    	  match="&#x3c;(.*?)&#x3e;"
        	    	  replace="&#x28;&#x22;&#x2b;\1&#x2b;&#x22;&#x29;">
        	    	<fileset dir="${dirdest}" includes="${rulesclass}.java"/></replaceregexp>
  	
    	<replaceregexp flags="g"
        	    	  match=":==(.*)&#xD;&#xA;"
        	    	  replace=":==\1&#x22;&#x3b;&#xD;&#xA;">
        	    	<fileset dir="${dirdest}" includes="${rulesclass}.java"/></replaceregexp>
        	
    	
    	<replaceregexp flags="g" match=":=="
    	    replace="=&#x22;">
    	    	<fileset dir="${dirdest}" includes="${rulesclass}.java"/></replaceregexp>


    	<replaceregexp flags="g"
        	    	  match="START_RULES\(([^\)]*)\)"
        	    	  replace=" package ${package};&#xD;&#xA;
    import java.text.SimpleDateFormat;&#xD;&#xA;
    import java.util.Arrays;&#xD;&#xA;
    import java.util.Calendar;&#xD;&#xA;
    import java.util.Date;&#xD;&#xA;
    import java.util.GregorianCalendar;&#xD;&#xA;
    import java.util.HashMap;&#xD;&#xA;
    import java.util.Iterator;&#xD;&#xA;
    import java.util.LinkedList;&#xD;&#xA;
    import java.util.List;&#xD;&#xA;
    import java.util.regex.Pattern;&#xD;&#xA;
    import opennlp.tools.namefind.RegexNameFinder;&#xD;&#xA;
    import de.dkt.eservices.eopennlp.modules.RegexFinder;&#xD;&#xA;
    import opennlp.tools.namefind.RegexNameFinder;&#xD;&#xA;
    import opennlp.tools.util.Span;&#xD;&#xA;
    import java.util.Map;&#xD;&#xA;
    &#xD;&#xA;
    public class \1 {&#xD;&#xA;
    static HashMap&#x3c;Integer, String&#x3e; englishDateRegexMap = new HashMap&#x3c;Integer, String&#x3e;();&#xD;&#xA;
    
    		static HashMap&#x3c;String, Integer&#x3e; englishMonthName2Number = new HashMap&#x3c;String, Integer&#x3e;(){{&#xD;&#xA;
    			put(&#x22;january&#x22;, 1);&#xD;&#xA;
    			put(&#x22;february&#x22;, 2);&#xD;&#xA;
    			put(&#x22;march&#x22;, 3);&#xD;&#xA;
    			put(&#x22;april&#x22;, 4);&#xD;&#xA;
    			put(&#x22;may&#x22;, 5);&#xD;&#xA;
    			put(&#x22;june&#x22;, 6);&#xD;&#xA;
    			put(&#x22;july&#x22;, 7);&#xD;&#xA;
    			put(&#x22;august&#x22;, 8);&#xD;&#xA;
    			put(&#x22;september&#x22;, 9);&#xD;&#xA;
    			put(&#x22;october&#x22;, 10);&#xD;&#xA;
    			put(&#x22;november&#x22;, 11);&#xD;&#xA;
    			put(&#x22;december&#x22;, 12);&#xD;&#xA;
    		}};		&#xD;&#xA;
    public static RegexNameFinder initEnglishDateFinder(){&#xD;&#xA;
    		int counter = 0;&#xD;&#xA;
    		List&#x3c;Pattern&#x3e; patterns = new LinkedList&#x3c;Pattern&#x3e;();&#xD;&#xA;">
        	    	<fileset dir="${dirdest}" includes="${rulesclass}.java"/></replaceregexp>
        	
    	<replaceregexp flags="g"
    	    	    	  match="END_RULES"
    	    	    	  replace="
    	       int counter2=0;&#xD;&#xA;
    	       Pattern[] patts = new Pattern[patterns.size()];&#xD;&#xA;
    	       for (Pattern p : patterns) {&#xD;&#xA;
    	    	   patts[counter2]=p;&#xD;&#xA;
    	    	   counter2++;&#xD;&#xA;
    		}&#xD;&#xA;
    	 RegexNameFinder rnf = new RegexNameFinder(patts, null);&#xD;&#xA;
    	 return rnf;&#xD;&#xA;
    	 }&#xD;&#xA;
    	     
    	     public static void main(String[] args) {&#xD;&#xA;
    	 		RegexNameFinder timeFinder= AutomaticEnglishDateRules.initEnglishDateFinder();&#xD;&#xA;
    	 		String input = &#x22;october 6 1990&#x22;;&#xD;&#xA;
    	 		RegexFinder rf = new RegexFinder();&#xD;&#xA;
    	 		List&#x3c;Span&#x3e; timeSpans = rf.filterFind(timeFinder, input);&#xD;&#xA;
    	 		for (Span s : timeSpans){&#xD;&#xA;
    	 			System.out.println(&#x22;DEBUGGING:&#x22; + s.getStart() + &#x22;=--=&#x22;+s.getEnd());&#xD;&#xA;
    	 			System.out.println(&#x22;DEBUGGING span:&#x22; + input.substring(s.getStart(), s.getEnd()));&#xD;&#xA;
    				LinkedList&#x3c;String&#x3e; normalizedStartAndEnd = normalizeEnglishDate(input.substring(s.getStart(), s.getEnd()));;&#xD;&#xA;
    		        System.out.println(&#x22;DEBUGGING norm:&#x22; + normalizedStartAndEnd);;&#xD;&#xA;
    	 		}&#xD;&#xA;
    		}&#xD;&#xA;

">
    	    	<fileset dir="${dirdest}" includes="${rulesclass}.java"/></replaceregexp>
    	<replaceregexp flags="g"
    	    	    	  match="END_RULES"
    	    	    	  replace="
				RegexNameFinder rnf = new RegexNameFinder((Pattern[])patterns.toArray(), null);&#xD;&#xA;
				return rnf;&#xD;&#xA;
				}&#xD;&#xA;
    	">
    	<fileset dir="${dirdest}" includes="${rulesclass}.java"/></replaceregexp>
    	
    	<replaceregexp flags="g"
    	    	    	    	  match="BEGIN_NORMALIZATION"
    	    	    	    	  replace="
    	    		public static LinkedList&#x3c;String&#x3e; normalizeEnglishDate(String foundDate) {&#xD;&#xA;

    	    				// this is directly coupled to the dateRegexMap thing. If that changes, this needs to be checked too&#xD;&#xA;
    	    				Date normalizedStartDate = new Date();&#xD;&#xA;
    	    				Date normalizedEndDate = new Date();&#xD;&#xA;
    	    				Calendar cal = Calendar.getInstance();&#xD;&#xA;
    	    		&#xD;&#xA;
    	    				Iterator it = englishDateRegexMap.entrySet().iterator();&#xD;&#xA;
    	    				LinkedList&#x3c;String&#x3e; dates = new LinkedList&#x3c;String&#x3e;();&#xD;&#xA;
    	    		&#xD;&#xA;
    	    		while (it.hasNext()){&#xD;&#xA;
    	    					Map.Entry pair = (Map.Entry)it.next();&#xD;&#xA;
    	    					int key = (Integer) pair.getKey();&#xD;&#xA;
    	    					String p = (String) pair.getValue();&#xD;&#xA;
    	    					// compile with ^ and $ since I want the whole match/no submatches (not sure if this works though, debug!)&#xD;&#xA;
    	    					if (Pattern.matches(String.format(&#x22;^%s$&#x22;, p), foundDate)){&#xD;&#xA;
    	    	">
    	    	<fileset dir="${dirdest}" includes="${rulesclass}.java"/></replaceregexp>
    	    	
    	    	<replaceregexp flags="g"
    	    	    	    	  match="END_NORMALIZATION"
    	    	    	    	  replace="
    	    					}&#xD;&#xA;
    	    		}&#xD;&#xA;
    	    		&#xD;&#xA;
    	    				return dates;}&#xD;&#xA;
    	    		}&#xD;&#xA;
    	    	">
    	    	<fileset dir="${dirdest}" includes="${rulesclass}.java"/></replaceregexp>


    </target>
</project>
